diff --git a/dep/g3dlite/include/G3D/Color3.h b/dep/g3dlite/include/G3D/Color3.h
index 480117a..4272648 100644
--- a/dep/g3dlite/include/G3D/Color3.h
+++ b/dep/g3dlite/include/G3D/Color3.h
@@ -190,7 +190,7 @@ public:
     Color3 direction() const;
     float squaredLength () const;
     float dot (const Color3& rkVector) const;
-    float unitize (float fTolerance = 1e-06);
+    float unitize (float fTolerance = 1e-06f);
     Color3 cross (const Color3& rkVector) const;
     Color3 unitCross (const Color3& rkVector) const;
 
diff --git a/dep/g3dlite/include/G3D/Matrix3.h b/dep/g3dlite/include/G3D/Matrix3.h
index d596156..a9a61fc 100644
--- a/dep/g3dlite/include/G3D/Matrix3.h
+++ b/dep/g3dlite/include/G3D/Matrix3.h
@@ -245,8 +245,8 @@ public:
     bool isOrthonormal() const;
 
     Matrix3 transpose () const;
-    bool inverse (Matrix3& rkInverse, float fTolerance = 1e-06) const;
-    Matrix3 inverse (float fTolerance = 1e-06) const;
+    bool inverse (Matrix3& rkInverse, float fTolerance = 1e-06f) const;
+    Matrix3 inverse (float fTolerance = 1e-06f) const;
     float determinant () const;
 
     /** singular value decomposition */
diff --git a/dep/g3dlite/include/G3D/Quat.h b/dep/g3dlite/include/G3D/Quat.h
index 2845ab0..cb3f6e3 100644
--- a/dep/g3dlite/include/G3D/Quat.h
+++ b/dep/g3dlite/include/G3D/Quat.h
@@ -345,8 +345,8 @@ public:
      Note that q.pow(a).pow(b) == q.pow(a + b)
      @cite Dam98 pg 21
      */
-    inline Quat pow(float x) const {
-        return (log() * x).exp();
+    inline Quat pow(float r) const {
+        return (log() * r).exp();
     }
 
     /** Make unit length in place */
@@ -359,9 +359,9 @@ public:
      the magnitude.
      */
     Quat toUnit() const {
-        Quat x = *this;
-        x.unitize();
-        return x;
+        Quat copyOfThis = *this;
+        copyOfThis.unitize();
+        return copyOfThis;
     }
 
     /**
diff --git a/dep/g3dlite/include/G3D/Rect2D.h b/dep/g3dlite/include/G3D/Rect2D.h
index 80c4edd..ede9440 100644
--- a/dep/g3dlite/include/G3D/Rect2D.h
+++ b/dep/g3dlite/include/G3D/Rect2D.h
@@ -118,7 +118,7 @@ private:
     }
 
     /** Uninitialized constructor */
-    Rect2D(bool b) {}
+    Rect2D(bool /*b*/) {}
 public:
 
     /** \param any Must either Rect2D::xywh(#, #, #, #) or Rect2D::xyxy(#, #, #, #)*/
diff --git a/dep/g3dlite/include/G3D/debugAssert.h b/dep/g3dlite/include/G3D/debugAssert.h
index 129235d..8ac7a02 100644
--- a/dep/g3dlite/include/G3D/debugAssert.h
+++ b/dep/g3dlite/include/G3D/debugAssert.h
@@ -43,12 +43,14 @@
 #endif
 
 #ifdef G3D_LINUX
+#if 0 /* G3DFIX: Disabled to avoid requirement for X11 libraries */
     // Needed so we can define a global display
     // pointer for debugAssert.
     #include <X11/Xlib.h>
     #include <X11/Xutil.h>
     #include <X11/Xatom.h>
 #endif
+#endif
 
 
 /**
@@ -184,6 +186,7 @@ namespace _internal {
 namespace G3D {  namespace _internal {
 
 #ifdef G3D_LINUX
+#if 0 /* G3DFIX: Disabled to avoid requirement for X11 libraries */
     /**
      A pointer to the X11 display.  Initially NULL.  If set to a
      non-null value (e.g. by SDLWindow), debugAssert attempts to use
@@ -200,6 +203,7 @@ namespace G3D {  namespace _internal {
      */
     extern Window        x11Window;
 #endif
+#endif
 
 /**
  Pops up an assertion dialog or prints an assertion
diff --git a/dep/g3dlite/include/G3D/g3dmath.h b/dep/g3dlite/include/G3D/g3dmath.h
index 6185440..4ad643d 100644
--- a/dep/g3dlite/include/G3D/g3dmath.h
+++ b/dep/g3dlite/include/G3D/g3dmath.h
@@ -31,7 +31,7 @@
 #include <stdlib.h>
 #include <stdint.h>
 
-#ifdef _MSC_VER
+#if defined(_MSC_VER) && (_MSC_VER < 1000)
     // Visual Studio is missing inttypes.h
 #   ifndef PRId64
 #       define PRId64 "I64d"
diff --git a/dep/g3dlite/include/G3D/G3DAllocator.h b/dep/g3dlite/include/G3D/G3DAllocator.h
index 394957c..64a925b 100644
--- a/dep/g3dlite/include/G3D/G3DAllocator.h
+++ b/dep/g3dlite/include/G3D/G3DAllocator.h
@@ -82,7 +82,7 @@ class G3DAllocator {
     }
 
     // deallocate storage p of deleted elements
-    void deallocate (pointer p, size_type num) {
+    void deallocate (pointer p, size_type /*num*/) {
         //::operator delete((void*)p);
         _internal::systemFree(p);
     }
diff --git a/dep/g3dlite/include/G3D/G3DString.h b/dep/g3dlite/include/G3D/G3DString.h
index cb912de..fc5f3c0 100644
--- a/dep/g3dlite/include/G3D/G3DString.h
+++ b/dep/g3dlite/include/G3D/G3DString.h
@@ -3,7 +3,7 @@
 
 #include <string>
 #include <stdint.h>
-#include <smmintrin.h>
+#include <xmmintrin.h>
 #include <assert.h>
 #include <algorithm>
 #include "G3D/platform.h"
diff --git a/dep/g3dlite/include/G3D/platform.h b/dep/g3dlite/include/G3D/platform.h
index 114d6fc..f37eefc 100644
--- a/dep/g3dlite/include/G3D/platform.h
+++ b/dep/g3dlite/include/G3D/platform.h
@@ -66,8 +66,13 @@ These control the version of Winsock used by G3D.
 
 #ifdef _MSC_VER
 #   define G3D_WINDOWS
+#elif defined(__MINGW32__)
+    #define G3D_WINDOWS
+    #undef __MSVCRT_VERSION__
+    #define __MSVCRT_VERSION__ 0x0601
+    #include <windows.h>
 #elif defined(__APPLE__)
-#   define G3D_OSX
+#   define G3D_LINUX
 
     // Prevent OS X fp.h header from being included; it defines
     // pi as a constant, which creates a conflict with G3D
@@ -366,13 +371,18 @@ int WINAPI WinMain(HINSTANCE hInst, HINSTANCE hPrev, LPSTR szCmdLine, int sw) {\
 #endif
 #if (!defined(_LIBCPP_VERSION) && defined(__APPLE__)) || (!defined(_LIBCPP_VERSION) && defined(__linux__))
 #   include <tr1/memory>
+#else
+#   include <memory>
+#endif
+
+namespace G3D {
+#if (!defined(_LIBCPP_VERSION) && defined(__APPLE__)) || (!defined(_LIBCPP_VERSION) && defined(__linux__))
     using std::tr1::shared_ptr;
     using std::tr1::weak_ptr;
     using std::tr1::dynamic_pointer_cast;
     using std::tr1::static_pointer_cast;
     using std::tr1::enable_shared_from_this;
 #else
-#   include <memory>
     using std::shared_ptr;
     using std::weak_ptr;
     using std::dynamic_pointer_cast;
@@ -380,7 +390,6 @@ int WINAPI WinMain(HINSTANCE hInst, HINSTANCE hPrev, LPSTR szCmdLine, int sw) {\
     using std::enable_shared_from_this;
 #endif
 
-namespace G3D {
     /** Options for initG3D and initGLG3D. */
     class G3DSpecification {
     public:
diff --git a/dep/g3dlite/source/BinaryInput.cpp b/dep/g3dlite/source/BinaryInput.cpp
index 617505e..ffd337b 100644
--- a/dep/g3dlite/source/BinaryInput.cpp
+++ b/dep/g3dlite/source/BinaryInput.cpp
@@ -38,8 +38,10 @@
 #include "G3D/fileutils.h"
 #include "G3D/Log.h"
 #include "G3D/FileSystem.h"
-#include "../../zlib.lib/include/zlib.h"
+#include <zlib.h>
+#if _HAVE_ZIP /* G3DFIX: Use ZIP-library only if defined */
 #include "../../zip.lib/include/zip.h"
+#endif
 #include <cstring>
 
 namespace G3D {
@@ -126,6 +128,7 @@ BinaryInput::BinaryInput
 
     setEndian(fileEndian);
     
+#if _HAVE_ZIP /* G3DFIX: Use ZIP-library only if defined */
     String zipfile;
     if (FileSystem::inZipfile(m_filename, zipfile)) {
         // Load from zipfile
@@ -163,6 +166,7 @@ BinaryInput::BinaryInput
         return;
     }
 
+#endif
     // Figure out how big the file is and verify that it exists.
     m_length = FileSystem::size(m_filename);
 
diff --git a/dep/g3dlite/source/BinaryOutput.cpp b/dep/g3dlite/source/BinaryOutput.cpp
index cfd8541..e9b9c94 100644
--- a/dep/g3dlite/source/BinaryOutput.cpp
+++ b/dep/g3dlite/source/BinaryOutput.cpp
@@ -14,7 +14,7 @@
 #include "G3D/FileSystem.h"
 #include "G3D/stringutils.h"
 #include "G3D/Array.h"
-#include "../../zlib.lib/include/zlib.h"
+#include <zlib.h>
 #include "G3D/Log.h"
 #include <cstring>
 
diff --git a/dep/g3dlite/source/FileSystem.cpp b/dep/g3dlite/source/FileSystem.cpp
index 68dd236..53caa4f 100644
--- a/dep/g3dlite/source/FileSystem.cpp
+++ b/dep/g3dlite/source/FileSystem.cpp
@@ -12,7 +12,9 @@
 #include "G3D/fileutils.h"
 #include <sys/stat.h>
 #include <sys/types.h>
-#include "zip.h"
+#if _HAVE_ZIP /* G3DFIX: Use ZIP-library only if defined */
+    #include "zip.h"
+#endif
 #include "G3D/g3dfnmatch.h"
 #include "G3D/BinaryInput.h"
 #include "G3D/BinaryOutput.h"
@@ -24,7 +26,11 @@
     // Needed for _findfirst
 #   include <io.h>
 
+#  ifdef __MINGW32__
+#    define stat64 stat
+#  else
 #    define stat64 _stat64
+#  endif
 #else
 #   include <dirent.h>
 #   include <fnmatch.h>
@@ -81,6 +87,7 @@ bool FileSystem::Dir::contains(const String& f, bool caseSensitive) const {
 
     
 void FileSystem::Dir::computeZipListing(const String& zipfile, const String& _pathInsideZipfile) {
+#if _HAVE_ZIP /* G3DFIX: Use ZIP-library only if defined */
     const String& pathInsideZipfile = FilePath::canonicalize(_pathInsideZipfile);
     struct zip* z = zip_open( FilePath::removeTrailingSlash(zipfile).c_str(), ZIP_CHECKCONS, NULL );
     debugAssert(z);
@@ -131,6 +138,10 @@ void FileSystem::Dir::computeZipListing(const String& zipfile, const String& _pa
     
     zip_close(z);
     z = NULL;
+#else
+    (void)zipfile;
+    (void)_pathInsideZipfile;
+#endif
 }
 
 
@@ -659,6 +670,7 @@ int64 FileSystem::_size(const String& _filename) {
     int result = stat64(filename.c_str(), &st);
     
     if (result == -1) {
+#if _HAVE_ZIP /* G3DFIX: Use ZIP-library only if defined */
         String zip, contents;
         if (zipfileExists(filename, zip, contents)) {
             int64 requiredMem;
@@ -676,8 +688,11 @@ int64 FileSystem::_size(const String& _filename) {
             zip_close(z);
             return requiredMem;
         } else {
+#endif
             return -1;
+#if _HAVE_ZIP /* G3DFIX: Use ZIP-library only if defined */
         }
+#endif
     }
     
     return st.st_size;
diff --git a/dep/g3dlite/source/RegistryUtil.cpp b/dep/g3dlite/source/RegistryUtil.cpp
index 4f1538f..276c7c1 100644
--- a/dep/g3dlite/source/RegistryUtil.cpp
+++ b/dep/g3dlite/source/RegistryUtil.cpp
@@ -16,6 +16,14 @@
 #include "G3D/RegistryUtil.h"
 #include "G3D/System.h"
 
+#ifdef __MINGW32__
+#  ifndef HKEY_PERFORMANCE_TEXT
+#    define HKEY_PERFORMANCE_TEXT ((HKEY)((LONG)0x80000050))
+#  endif
+#  ifndef HKEY_PERFORMANCE_NLSTEXT
+#    define HKEY_PERFORMANCE_NLSTEXT ((HKEY)((LONG)0x80000060))
+#  endif
+#endif
 namespace G3D {
 
 // static helpers
diff --git a/dep/g3dlite/source/System.cpp b/dep/g3dlite/source/System.cpp
index 52cdb7e..84bb7e7 100644
--- a/dep/g3dlite/source/System.cpp
+++ b/dep/g3dlite/source/System.cpp
@@ -600,7 +600,7 @@ void System::getStandardProcessorExtensions() {
 #endif
 }
 
-#if defined(G3D_WINDOWS) && defined(_M_IX86)
+#if defined(G3D_WINDOWS) && defined(_M_IX86) && !defined(__MINGW32__) /* G3DFIX: Don't check if on 64-bit Windows platforms or using MinGW */
 // 32-bit
 /** Michael Herf's fast memcpy.  Assumes 16-byte alignment */
 void memcpyMMX(void* dst, const void* src, int nbytes) {
@@ -654,7 +654,7 @@ void memcpyMMX(void* dst, const void* src, int nbytes) {
 #endif
 
 void System::memcpy(void* dst, const void* src, size_t numBytes) {
-#if defined(G3D_WINDOWS) && defined(_M_IX86)
+#if defined(G3D_WINDOWS) && defined(_M_IX86) && !defined(__MINGW32__) /* G3DFIX: Don't check if on 64-bit Windows platforms or using MinGW */
     // The overhead of our memcpy seems to only be worthwhile on large arrays
     if (((size_t)dst % 16 == 0) && ((size_t)src % 16 == 0) && (numBytes > 3400000)) {
         memcpyMMX(dst, src, numBytes);
@@ -669,7 +669,7 @@ void System::memcpy(void* dst, const void* src, size_t numBytes) {
 
 /** Michael Herf's fastest memset. n32 must be filled with the same
     character repeated. */
-#if defined(G3D_WINDOWS) && defined(_M_IX86)
+#if defined(G3D_WINDOWS) && defined(_M_IX86) && !defined(__MINGW32__) /* G3DFIX: Don't check if on 64-bit Windows platforms or using MinGW */
 // On x86 processors, use MMX
 void memfill(void *dst, int n32, unsigned long i) {
 
@@ -707,7 +707,7 @@ void memfill(void *dst, int n32, unsigned long i) {
 
 void System::memset(void* dst, uint8 value, size_t numBytes) {
     alwaysAssertM(dst != NULL, "Cannot memset NULL address.");
-#if defined(G3D_WINDOWS) && defined(_M_IX86)
+#if defined(G3D_WINDOWS) && defined(_M_IX86) && !defined(__MINGW32__) /* G3DFIX: Don't check if on 64-bit Windows platforms or using MinGW */
     if ((((size_t)dst % 16) == 0) && (numBytes >= 512*1024)) {
         uint32 v = value;
         v = v + (v << 8) + (v << 16) + (v << 24); 
diff --git a/dep/g3dlite/source/debugAssert.cpp b/dep/g3dlite/source/debugAssert.cpp
index a5306c3..db9e7ff 100644
--- a/dep/g3dlite/source/debugAssert.cpp
+++ b/dep/g3dlite/source/debugAssert.cpp
@@ -37,9 +37,11 @@ AssertionHook _debugHook = _handleDebugAssert_;
 AssertionHook _failureHook = _handleErrorCheck_;
 
 #ifdef G3D_LINUX
+#if 0 /* G3DFIX: Disabled to avoid requirement for X11 libraries */
     Display*      x11Display = NULL;
     Window        x11Window  = 0;
 #endif
+#endif
 
 
 #ifdef G3D_WINDOWS
@@ -119,6 +121,8 @@ static void createErrorMessage(
         const char* moduleName = strrchr(modulePath, '\\');
         outTitle = outTitle + String(" - ") + String(moduleName ? (moduleName + 1) : modulePath);
 
+    #else
+        (void)outTitle;
     #endif
 
     // Build the message.
@@ -250,6 +254,7 @@ void _releaseInputGrab_() {
         ClipCursor(NULL);
         
     #elif defined(G3D_LINUX)
+#if 0 /* G3DFIX: Disabled to avoid requirement for X11 libraries */
         if (x11Display != NULL) {
             XUngrabPointer(x11Display, CurrentTime);
             XUngrabKeyboard(x11Display, CurrentTime);
@@ -264,6 +269,7 @@ void _releaseInputGrab_() {
             XAllowEvents(x11Display, AsyncPointer, CurrentTime);
             XFlush(x11Display);
         }
+#endif
     #elif defined(G3D_OSX)
         // TODO: OS X
     #endif
diff --git a/dep/g3dlite/source/fileutils.cpp b/dep/g3dlite/source/fileutils.cpp
index e92aae5..cf06f8f 100644
--- a/dep/g3dlite/source/fileutils.cpp
+++ b/dep/g3dlite/source/fileutils.cpp
@@ -21,7 +21,9 @@
 
 #include <sys/stat.h>
 #include <sys/types.h>
-#include "zip.h"
+#if _HAVE_ZIP /* G3DFIX: Use ZIP-library only if defined */
+    #include "zip.h"
+#endif
 
 #ifdef G3D_WINDOWS
    // Needed for _getcwd
@@ -133,6 +135,7 @@ String readWholeFile(const String& filename) {
         // In zipfile
         FileSystem::markFileUsed(zipfile);
 
+#if _HAVE_ZIP /* G3DFIX: Use ZIP-library only if defined */
         // Zipfiles require Unix-style slashes
         String internalFile = FilePath::canonicalize(filename.substr(zipfile.length() + 1));
         struct zip* z = zip_open(zipfile.c_str(), ZIP_CHECKCONS, NULL);
@@ -160,6 +163,7 @@ String readWholeFile(const String& filename) {
             System::alignedFree(buffer);
         }
         zip_close( z );
+#endif
     }
 
     return s;
@@ -171,6 +175,7 @@ int64 fileLength(const String& filename) {
     int result = _stat(filename.c_str(), &st);
     
     if (result == -1) {
+#if _HAVE_ZIP /* G3DFIX: Use ZIP-library only if defined */
         String zip, contents;
         if(zipfileExists(filename, zip, contents)){
             int64 requiredMem;
@@ -190,6 +195,9 @@ int64 fileLength(const String& filename) {
         } else {
         return -1;
         }
+#else
+        return -1;
+#endif
     }
 
     return st.st_size;
@@ -286,6 +294,7 @@ void createDirectory(
 
 ///////////////////////////////////////////////////////////////////////////////
 
+#if _HAVE_ZIP /* G3DFIX: Use ZIP-library only if defined */
 /* Helper methods for zipfileExists()*/
 // Given a string (the drive) and an array (the path), computes the directory
 static void _zip_resolveDirectory(String& completeDir, const String& drive, const Array<String>& path, const int length){
@@ -319,12 +328,14 @@ static bool _zip_zipContains(const String& zipDir, const String& desiredFile){
     }
     return true;
 }
+#endif
 
 
 /** If no zipfile exists, outZipfile and outInternalFile are unchanged */
 bool zipfileExists(const String& filename, String& outZipfile,
                    String& outInternalFile){
    
+#if _HAVE_ZIP /* G3DFIX: Use ZIP-library only if defined */
     Array<String> path;
     String drive, base, ext, zipfile, infile;
     parseFilename(filename, drive, path, base, ext);
@@ -387,6 +398,11 @@ bool zipfileExists(const String& filename, String& outZipfile,
         
     }
     
+#else
+    (void)filename;
+    (void)outZipfile;
+    (void)outInternalFile;
+#endif
     // not a valid directory structure ever, 
     // obviously no .zip was found within the path 
     return false;
@@ -752,6 +768,7 @@ static void getFileOrDirListZip(const String& path,
                                 Array<String>& files,
                                 bool wantFiles,
                                 bool includePath){
+#if _HAVE_ZIP /* G3DFIX: Use ZIP-library only if defined */
     struct zip *z = zip_open( path.c_str(), ZIP_CHECKCONS, NULL );
 
     Set<String> fileSet;
@@ -767,6 +784,13 @@ static void getFileOrDirListZip(const String& path,
     zip_close( z );
     
     fileSet.getMembers(files);
+#else
+    (void)path;
+    (void)prefix;
+    (void)files;
+    (void)wantFiles;
+    (void)includePath;
+#endif
 }
 
 
diff --git a/dep/g3dlite/source/initG3D.cpp b/dep/g3dlite/source/initG3D.cpp
index 93b46c4..db4775a 100644
--- a/dep/g3dlite/source/initG3D.cpp
+++ b/dep/g3dlite/source/initG3D.cpp
@@ -14,12 +14,16 @@ namespace _internal {
         return s;
     }
 
+#if 0 /*disable G3D networking*/
     void initializeNetwork();
     void cleanupNetwork();
+#endif
 }
 
 static void G3DCleanupHook() {
+#if 0 /*disable G3D networking*/
     _internal::cleanupNetwork();
+#endif
     System::cleanup();
 }
 
@@ -34,7 +38,9 @@ void initG3D(const G3DSpecification& spec) {
         // Trigger a call to System::init
         System::cpuSpeedMHz();
 
+#if 0 /*disable G3D networking*/
         _internal::initializeNetwork();
+#endif
     }
 }
 
diff --git a/dep/g3dlite/source/prompt.cpp b/dep/g3dlite/source/prompt.cpp
index 7a950e2..94d7c25 100644
--- a/dep/g3dlite/source/prompt.cpp
+++ b/dep/g3dlite/source/prompt.cpp
@@ -21,6 +21,7 @@
 #    define _getch getchar
 #endif
 
+#if 0 /* G3DFIX: exclude GUI prompt code */
 #ifdef G3D_OSX
 
 /*#ifdef __LP64__
@@ -37,9 +38,11 @@
 */
 
 #endif
+#endif /* G3DFIX: exclude GUI prompt code */
 
 namespace G3D {
 
+#if 0 /* G3DFIX: exclude GUI prompt code */
 #ifdef G3D_WINDOWS
 
 namespace _internal {
@@ -471,6 +474,7 @@ static int guiPrompt(
 }
 
 #endif
+#endif /* G3DFIX: exclude GUI prompt code */
 
 
 /**
@@ -533,6 +537,7 @@ static int textPrompt(
     return c;
 }
 
+#if 0 /* G3DFIX: exclude GUI prompt code */
 #ifdef G3D_OSX
 
 static int guiPrompt
@@ -545,6 +550,7 @@ static int guiPrompt
 }
 
 #endif
+#endif /* G3DFIX: exclude GUI prompt code */
 
 int prompt(
     const char*      windowTitle,
@@ -553,6 +559,7 @@ int prompt(
     int              numChoices,
     bool             useGui) {
 
+#if 0 /* G3DFIX: exclude GUI prompt code */
     #ifdef G3D_WINDOWS
         if (useGui) {
             // Build the message box
@@ -568,6 +575,9 @@ int prompt(
 		  return result;
                 }
         #endif
+#else
+    (void)useGui;
+#endif /* G3DFIX: exclude GUI prompt code */
     return textPrompt(windowTitle, prompt, choice, numChoices);
 }
 
diff --git a/dep/g3dlite/include/G3D/Matrix2.h b/dep/g3dlite/include/G3D/Matrix2.h
index f4e56c8..cce6c45 100644
--- a/dep/g3dlite/include/G3D/Matrix2.h
+++ b/dep/g3dlite/include/G3D/Matrix2.h
@@ -15,7 +15,7 @@ private:
 
 public:
 
-    Matrix2(DoNotInitialize dni) {}
+    Matrix2(DoNotInitialize /*dni*/) {}
 
     Matrix2() {
         data[0][0] = 1.0f; data[0][1] = 0.0f;
diff --git a/dep/g3dlite/include/G3D/Matrix3.h b/dep/g3dlite/include/G3D/Matrix3.h
index a9a61fc..229f998 100644
--- a/dep/g3dlite/include/G3D/Matrix3.h
+++ b/dep/g3dlite/include/G3D/Matrix3.h
@@ -57,7 +57,7 @@ public:
     */
     Matrix3(const Any& any);
 
-    Matrix3(DoNotInitialize dni) {}
+    Matrix3(DoNotInitialize /*dni*/) {}
 
     static Matrix3 fromColumns(const Vector3& c0, const Vector3& c1, const Vector3& c2) {
         Matrix3 m;
diff --git a/dep/g3dlite/include/G3D/Matrix4.h b/dep/g3dlite/include/G3D/Matrix4.h
index 55417c1..594119d 100644
--- a/dep/g3dlite/include/G3D/Matrix4.h
+++ b/dep/g3dlite/include/G3D/Matrix4.h
@@ -73,7 +73,7 @@ public:
         float r3c1, float r3c2, float r3c3, float r3c4,
         float r4c1, float r4c2, float r4c3, float r4c4);
 
-    Matrix4(DoNotInitialize dni) {}
+    Matrix4(DoNotInitialize /*dni*/) {}
 
     /**
      init should be <B>row major</B>.
diff --git a/dep/g3dlite/include/G3D/Vector2.h b/dep/g3dlite/include/G3D/Vector2.h
index ffaf87e..8ac67e7 100644
--- a/dep/g3dlite/include/G3D/Vector2.h
+++ b/dep/g3dlite/include/G3D/Vector2.h
@@ -56,7 +56,7 @@ public:
     /** \param any Must either Vector2(#, #) or Vector2 {x = #, y = #}*/
     Vector2(const Any& any);
     
-    Vector2(DoNotInitialize dni) {}
+    Vector2(DoNotInitialize /*dni*/) {}
 
     /** Converts the Vector2 to an Any. */
     Any toAny() const;
diff --git a/dep/g3dlite/include/G3D/Vector3.h b/dep/g3dlite/include/G3D/Vector3.h
index 3f7f4fd..efcb445 100644
--- a/dep/g3dlite/include/G3D/Vector3.h
+++ b/dep/g3dlite/include/G3D/Vector3.h
@@ -77,7 +77,7 @@ public:
     /** Initializes to zero */
     Vector3();
 
-    Vector3(DoNotInitialize dni) {}
+    Vector3(DoNotInitialize /*dni*/) {}
     /** 
         \param any  Must either Vector3(#, #, #) or Vector3 {x = #, y = #, z = #}.
         Because Point3 is a typedef for Vector3 in the current implementation,
